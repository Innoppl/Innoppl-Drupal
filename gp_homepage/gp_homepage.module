<?php
/**
 * Module to implement the homepage of mygivingpoint.org.
 * It will define the base look and feel of the site.
 * Providing Front-end functions is not in the scope of this module.
 *
 * @package givingpoint_package
 * @subpackage gp_homepage
 *
 * @category module
 */

/**
 * Implementation of init hook. 
 */
function gp_homepage_init() {
    module_load_include('inc', 'gp_homepage', 'gp_homepage_func');
    module_load_include('inc', 'gp_homepage', 'gp_homepage_theme');
}

/**
 * Implementation of menu hook.
 * @return <type>
 * 
 */
function gp_homepage_menu() {
    $base = array('file' => 'gp_homepage.menu.inc',);
    
    $items['gpindex'] = $base + array(
        'title' => '',
        'page callback' => 'gp_homepage_mc_gpindex',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['about'] = $base + array(
        'title' => 'About Us',
        'page callback' => 'gp_homepage_mc_about',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['for-parents'] = $base + array(
        'title' => 'For Parents',
        'page callback' => 'gp_homepage_mc_for_parents',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['for-schools'] = $base + array(
        'title' => 'For Schools',
        'page callback' => 'gp_homepage_mc_for_teachers',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['for-non-profits'] = $base + array(
        'title' => 'For Non-Profits',
        'page callback' => 'gp_homepage_mc_for_non_profits',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    return $items;
}

/**
 * Implementation of theme hook.
 * @return <type>
 * 
 */
function gp_homepage_theme() {
    $path = drupal_get_path('module', 'gp_homepage');
    $base = array(
        'path' => "$path/theme",
    );
    return array(
        'gpindex_page' => $base + array(
            'template' => 'gpindex-page',
            'arguments' => array('sections'=>array(),),
        ),
        'gpindex_news' => $base + array(
            'template' => 'gpindex-news',
            'arguments' => array('sections'=>array(),),
        ),
        'header' => $base + array(
            'template' => 'header',
            'arguments' => array('sections'=>array(),),
        ),
        'footer' => $base + array(
            'template' => 'footer',
            'arguments' => array(),
        ),
        'top_menu' => $base + array(
            'template' => 'top-menu',
            'arguments' => array('links'=>array(),),
        ),
		'slideshow' => $base + array(
            'template' => 'slideshow',
            'arguments' => array('nodes'=>array(),),
        )
    );
}

/**
 * Implementation of form_alter hook.
 * @param <type> $form
 * @param <type> $form_state
 * @param <type> $form_id
 * 
 */
function gp_homepage_form_alter(&$form, $form_state, $form_id) {
    switch ($form_id) {
        case "search_theme_form":
            //[sudhir] customizations to the search box
            unset($form['search_theme_form']['#title']);
            $form['search_theme_form']['#size'] = 25;
            
            break;
    }
}

function gp_homepage_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
    switch ($op) {
        case 'view' :
        {
            if($node->type=='page' || $node->type=='news' ){
              $node->content['body']['#prefix'] = "<div id='static-pages'>";
              $node->content['body']['#suffix'] = "</div>";
            }
            if($node->type=='contribution'){
              //echo "<pre>";print_r($node);
            }
        }
    }
}

function gp_homepage_menu_alter(&$items){
    global $user;
//  $items['node/add/grant-request']['access callback'] = 'gpapi_dashboard_access';
//
//  $items['node/add/grant-request']['access arguments'][1] = $items['node/add/grant-request']['access arguments'];
//  $items['node/add/grant-request']['access arguments'][0] = $user->uid;
//  $items['node/add/grant-request']['access arguments'][2] = 'grant_request_access';
  
  $items['node']['access arguments'] = array('administer site configuration');  
}

/**
 * Overriding profile search
 * @param <type> $op
 * @param <type> $keys
 * @return <type> 
 */


function gp_homepage_search($op = 'search', $keys = null) {   
  switch ($op) {
    case 'name':
        return t('User Profiles');

    case 'search':      
        $find = array();
        $keywords = explode(' ', check_plain(strip_tags($keys)));
        $i = count($keywords);
        $keys = preg_replace('!\*+!', '%', $keys);

        if ($i > 0) {
          $users = array();
          $match = array();
          while ($i > 0) {
            $j = $i - 1;
            if (user_access('administer users')) {
            // administrators don't have restrictions
              $sql = "FROM {users} u INNER JOIN {profile_values} pv ON u.uid = pv.uid INNER JOIN {profile_fields} pf ON pv.fid = pf.fid WHERE pv.value LIKE '%%%s%%' OR u.name LIKE '%%%s%%'";
              $result = db_query('SELECT DISTINCT u.* '. $sql, $keywords[$j], $keywords[$j]);
            }
            else {
            // non-administrators can only search public fields and active users
              $sql = "FROM {users} u INNER JOIN {profile_values} pv ON u.uid = pv.uid INNER JOIN {profile_fields} pf ON pv.fid = pf.fid WHERE pv.value LIKE '%%%s%%' OR u.name LIKE '%%%s%%' AND pf.visibility IN (%d, %d) AND u.status = 1";
              $result = db_query('SELECT DISTINCT u.* '. $sql, $keywords[$j], $keywords[$j], PROFILE_PUBLIC, PROFILE_PUBLIC_LISTINGS);
            }

            while ($auser = db_fetch_object($result)) {
              if (in_array($auser->uid, $users) && !in_array($auser->uid, $match)) {
                $match[] = $auser->uid;
              }
              else {
                $users[] = $auser->uid;
              }
            }
            $i = $i - 1;
          }

          if ($match) {
            $items = $match;
          }
          else {
            $items = $users;
          }

          if ($items) {
            $finalsql = pager_query('SELECT * FROM {users} WHERE uid IN ('. implode(', ', $items).')');
              while ($pageditems = db_fetch_object($finalsql)) {
                // load the user object
                $user = user_load(array('uid'=>$pageditems->uid));

                // create the profile fields array
                // Show private fields to administrators and people viewing their own account.
                if (user_access('administer users') || $GLOBALS['user']->uid == $user->uid) {
                  $result = db_query('SELECT * FROM {profile_fields} WHERE visibility != %d ORDER BY category, weight', PROFILE_HIDDEN);
                }
                else {
                  $result = db_query('SELECT * FROM {profile_fields} WHERE visibility != %d AND visibility != %d ORDER BY category, weight', PROFILE_PRIVATE, PROFILE_HIDDEN);
                }

                $profile_fields = array();
                while ($field = db_fetch_object($result)) {
                  if ($value = profile_view_field($user, $field)) {
                    $title = ($field->type != 'checkbox') ? check_plain($field->title) : NULL;
                    $item = array(
                      'title' => $title,
                      'value' => $value,
                      'class' => $field->name,
                    );
                    $profile_fields[$field->category][$field->name] = $item;
                  }
                }

                $entry = array();
                foreach ($profile_fields as $category => $fields) {
                  foreach ($fields as $field) {
                    $entry[] = $field['value'];
                  }
                  $view = implode(' | ', $entry);
                }
                $find[] = array('title' => $user->name, 'link' => url("user/$user->uid"), 'snippet' => search_excerpt($keys, $view));
              }
          }          
          return $find;
        }

  }
}

