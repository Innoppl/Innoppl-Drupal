<?php
/* 
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @param <type> $user_id
 * @return <type>
 *
 */
function _get_filtered_projects($state = '', $author = '', $name = '', $from_date = '', $to_date = '', $organization = '') {
    
    $projects = array();  

    $join = " left join content_type_project project on project.nid = node.nid
            left join workflow_node wn on wn.nid = node.nid
            left join workflow_states ws on wn.sid = ws.sid
            left join workflows w on ws.wid = w.wid";
    $join .= " Left join profile_values profile_values on profile_values.uid = node.uid ";
    $join .= " Left join profile_fields profile on profile.fid = profile_values.fid ";
    $where = " WHERE (node.type in ('project')) and w.name = 'Promote Projects' and (ws.state = 'Active' or ws.state = 'Done') and UNIX_TIMESTAMP(project.field_end_date_value) > UNIX_TIMESTAMP() ";
    $order_by = " order by abs(project.field_current_donation_value) desc, project.field_end_date_value asc";
    
    if(!empty($state)) {
        $join .= " Left join term_node term_node on node.nid = term_node.nid";
        $join .= " Left join term_data term_data on term_node.tid = term_data.tid";
        $where .= "AND (term_data.tid = $state) AND (term_data.vid = '4') ";
    }

    if(!empty($author)) {
        $join .= " Left join users user on node.uid = user.uid";
        $where .= "AND (user.mail like \"%$author%\") ";
    }
    if(!empty($name)) {
        $where .= "AND (((profile_values.value like \"%$name%\") AND (profile.name = 'profile_first_name')) || ((profile_values.value like \"%$name%\") AND (profile.name = 'profile_contact_first_name'))) ";
    }
    
    if(!empty($from_date)) {        
        $from_date_array = explode('-', $from_date);
        $from_date_timestamp = gmmktime(0,0,0,$from_date_array[1],$from_date_array[2],(int)$from_date_array[0]);
        
        if(empty($to_date)) {
            $to_date_timestamp = time();
        }
        else {
            $to_date_array = explode('-', $to_date);
            $to_date_timestamp = gmmktime(0,0,0,$to_date_array[1],$to_date_array[2],(int)$to_date_array[0]);
        }
            
        $where .= "AND node.created between '$from_date_timestamp' and '$to_date_timestamp' ";

    }

    if(!empty($organization)) {           
         $where .= "AND (profile_values.value like \"%$organization%\") AND (profile.name = 'profile_organization_name') ";

    }


    $query = "SELECT distinct(node.nid) FROM node node";
    $query .= $join;
    $query .= $where;
    $query .= $order_by;
    
    $count_query = "select count(*) from ($query) count_sql";
   
    $result_set = pager_query($query,4,0,$count_query);
    
    while($row = db_fetch_object($result_set)) {
        
        $node = node_load($row->nid);
        $user = user_load($node->uid);
        profile_load_profile($user);
        
        $node_info['title'] = $node->title;
        $node_info['desc'] = $node->og_description;
        
        if(!empty($node->field_start_date[0]['value'])) {
            $node_info['event_date'] = format_date(strtotime($node->field_start_date[0]['value']), 'gp1');
            if(!empty($node->field_end_date[0]['value']) && $node->field_end_date[0]['value']!=$node->field_start_date[0]['value'] ) {
                $node_info['event_date'].=" - ".format_date(strtotime($node->field_end_date[0]['value']), 'gp1');
            }
        }
        else {
            $node_info['event_date'] = '';
        }
        if(in_array('Giving Pointer',$user->roles)) {
            $node_info['author'] = l(gpapi_displayname($user), 'profile/'.$user->uid);
        }
        if(in_array('Non-Profit Organization',$user->roles)) {
            $node_info['author'] = l($user->profile_organization_name, 'profile/'.$user->uid);
        }
      //  $node_info['author'] = $user->profile_public_name;
        $node_info['pri_image'] = theme('imagecache','113x113',$node->field_primary_image[0]['filepath']);
        $node_info['node_path'] = drupal_get_path_alias('node/'.$node->nid);

        if(!empty($node->field_volunteers[0]['value'])) {
            $node_info['volunteers'] = $node->field_volunteers[0]['value'];
        }
        else {
            $node_info['volunteers'] = 0;
        }

        if(!empty($node->field_current_volunteers[0]['value'])) {
            $node_info['current_volunteers'] = $node->field_current_volunteers[0]['value'];
        }
        else {
            $node_info['current_volunteers'] = 0;
        }

        if(!empty($node->field_donation[0]['value'])) {
            $node_info['donation_needed'] = $node->field_donation[0]['value'];
        }
        else {
            $node_info['donation_needed'] = 0;
        }

        $node_info['donation'] = get_total_approved_donations($node->nid);
        
        foreach($node->taxonomy as $key => $val) {
            if($val->vid == '4') {
                $node_info['loc'] = $val->name;
            }
        }
            $project_arr[] = $node_info;
    }

    $output['page'] = $project_arr;
    $output['pager'] = theme('pager');
    return $output;
}

/**
 *
 * @param <type> $search_text
 * @return <type>
 * 
 */
function _get_search_filtered_project($search_text = '') {

    if(!empty($search_text)) {

        $search_key = $search_text. " type:project";
        $search_results = module_invoke('gpapi', 'search', 'search', $search_key, 4);
        
        if(!empty($search_results)) {
            foreach($search_results as $key => $result) {
                if(strtotime($result['node']->field_end_date[0]['value']) > time()) {
                
                $user = user_load($result['node']->uid);
                profile_load_profile($user);
                
                $node_info['title'] = $result['node']->title;
                $node_info['desc'] = $result['node']->og_description;

                $node=$result["node"];
                if(!empty($node->field_start_date[0]['value'])) {
                   $node_info['event_date'] = format_date(strtotime($node->field_start_date[0]['value']), 'gp1');
//                   if(!empty($node->field_end_date[0]['value']) && $node->field_end_date[0]['value']!=$node->field_start_date[0]['value'] ) {
//                            $node_info['event_date'].=" - ".format_date(strtotime($node->field_end_date[0]['value']), 'gp1');
//                   }
                }
                else {
                    $node_info['event_date'] = '';
                }
                if(in_array('Giving Pointer',$user->roles)) {
                    $node_info['author'] = l(gpapi_displayname($user), 'profile/'.$user->uid);
                }
                if(in_array('Non-Profit Organization',$user->roles)) {
                    $node_info['author'] = l($user->profile_organization_name, 'profile/'.$user->uid);
                }
            //    $node_info['author'] = $user->profile_public_name;
                $node_info['pri_image'] = theme('imagecache','113x113',$result['node']->field_primary_image[0]['filepath']);
                $node_info['node_path'] = drupal_get_path_alias('node/'.$result['node']->nid);

                if(!empty($result['node']->field_volunteers[0]['value'])) {
                    $node_info['volunteers'] = $result['node']->field_volunteers[0]['value'];
                }
                else {
                    $node_info['volunteers'] = 0;
                }

                if(!empty($result['node']->field_current_volunteers[0]['value'])) {
                    $node_info['current_volunteers'] = $result['node']->field_current_volunteers[0]['value'];
                }
                else {
                    $node_info['current_volunteers'] = 0;
                }

                if(!empty($result['node']->field_donation[0]['value'])) {
                    $node_info['donation_needed'] = $result['node']->field_donation[0]['value'];
                }
                else {
                    $node_info['donation_needed'] = 0;
                }

                $node_info['donation'] = get_total_approved_donations($result['node']->nid);

                foreach($result['node']->taxonomy as $key => $val) {
                    if($val->vid == '4') {
                        $node_info['loc'] = $val->name;
                    }
                }

                $project_arr[] = $node_info;
                }
            }
        }

        $output['page'] = $project_arr;
        $output['pager'] = theme('pager');
        return $output;


    }
}

/**
 *
 * @param <type> $project_id
 * @return <type> 
 */
function get_total_approved_donations($project_id)
{
    $amount = 0;

    $query = "select sum(content_field_donation_amount.field_donation_amount_value) as total
              from node
              left join content_type_project_donation on node.nid = content_type_project_donation.nid
              left join og_ancestry on og_ancestry.nid = node.nid 
              left join workflow_node wn on wn.nid = node.nid
              left join workflow_states ws on wn.sid = ws.sid
              left join workflows w on ws.wid = w.wid
	      left join content_field_donation_amount on node.nid = content_field_donation_amount.nid
              where node.type='project_donation' and w.name = 'Promote Contributions'
              and og_ancestry.group_nid = {$project_id} and (ws.state = 'Approved')";

    $result_set = db_fetch_object(db_query($query));
    if ($result_set)
    {
       if (!empty($result_set->total)){
           $amount = $result_set->total;
       }
    }

    return $amount;
}

/**
 *
 * @param <type> $project_id
 * @return <type>
 */
function get_project_donation_amount_needed($project_id)
{
    $amount = 0;
    
    $query = "select content_type_project.field_donation_value as field_donation_value
              from content_type_project
              where content_type_project.nid = {$project_id} ";

    $result_set = db_fetch_object(db_query($query));
    if ($result_set)
    {
       $amount = $result_set->field_donation_value;
    }

    return $amount;
}

function get_project_thankyou_letter($project_id) {
    global $user;
    $thankyou_letter = array();
    
    $child_nodes = og_group_child_nids($project_id);    
    foreach($child_nodes as $key=>$val) {
        $child_node_info = node_load($val);
        if($child_node_info->type == 'project_thankyou_letter') {
            $thankyou_letter['nid'] = $child_node_info->nid;
            $thankyou_letter['text'] = $child_node_info->field_letter_body[0]['value'];
        }
    }

    return $thankyou_letter;
    
}
